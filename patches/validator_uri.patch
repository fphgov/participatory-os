diff --git a/src/Hostname.php b/src/Hostname.php
index 7c72fe81..58915174 100644
--- a/src/Hostname.php
+++ b/src/Hostname.php
@@ -55,7 +55,7 @@ class Hostname extends AbstractValidator
     /** @var array */
     protected $messageTemplates = [
         self::CANNOT_DECODE_PUNYCODE  => "The input appears to be a DNS hostname but the given punycode notation cannot be decoded",
-        self::INVALID                 => "Invalid type given. String expected",
+        self::INVALID                 => "Invalid type given. String or Array expected",
         self::INVALID_DASH            => "The input appears to be a DNS hostname but contains a dash in an invalid position",
         self::INVALID_HOSTNAME        => "The input does not match the expected structure for a DNS hostname",
         self::INVALID_HOSTNAME_SCHEMA => "The input appears to be a DNS hostname but cannot match against hostname schema for TLD '%tld%'",
@@ -1966,10 +1966,29 @@ public function useTldCheck($useTldCheck)
      *
      * Returns true if and only if the $value is a valid hostname with respect to the current allow option
      *
-     * @param  string $value
+     * @param  string|array $value
      * @return bool
      */
     public function isValid($value)
+    {
+        if (is_array($value)) {
+            $isValid = true;
+
+            foreach ($value as $href) {
+                $valid = $this->checkIsValid($href);
+
+                if ($isValid == true) {
+                    $isValid = $valid;
+                }
+            }
+
+            return $isValid;
+        }
+
+        return $this->checkIsValid($value);
+    }
+
+    private function checkIsValid($value)
     {
         if (! is_string($value)) {
             $this->error(self::INVALID);
diff --git a/src/Uri.php b/src/Uri.php
index 29f7c346..ed97f713 100644
--- a/src/Uri.php
+++ b/src/Uri.php
@@ -23,7 +23,7 @@ class Uri extends AbstractValidator

     /** @var array */
     protected $messageTemplates = [
-        self::INVALID => 'Invalid type given. String expected',
+        self::INVALID => 'Invalid type given. String or Array expected',
         self::NOT_URI => 'The input does not appear to be a valid Uri',
     ];

@@ -152,10 +152,29 @@ public function setAllowRelative($allowRelative)
     /**
      * Returns true if and only if $value validates as a Uri
      *
-     * @param  string $value
+     * @param  string|array $value
      * @return bool
      */
     public function isValid($value)
+    {
+        if (is_array($value)) {
+            $isValid = true;
+
+            foreach ($value as $href) {
+                $valid = $this->checkIsValid($href);
+
+                if ($isValid == true) {
+                    $isValid = $valid;
+                }
+            }
+
+            return $isValid;
+        }
+
+        return $this->checkIsValid($value);
+    }
+
+    private function checkIsValid($value)
     {
         if (! is_string($value)) {
             $this->error(self::INVALID);

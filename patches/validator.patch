diff --git a/src/File/Count.php b/src/File/Count.php
index 1f8ee096..0ce361c7 100644
--- a/src/File/Count.php
+++ b/src/File/Count.php
@@ -4,6 +4,7 @@ namespace Laminas\Validator\File;

 use Laminas\Validator\AbstractValidator;
 use Laminas\Validator\Exception;
+use Psr\Http\Message\UploadedFileInterface;
 use Traversable;

 use function array_key_exists;
@@ -177,7 +178,7 @@ class Count extends AbstractValidator
     /**
      * Adds a file for validation
      *
-     * @param string|array $file
+     * @param string|array|UploadedFileInterface $file
      * @return $this
      */
     public function addFile($file)
@@ -194,6 +195,10 @@ class Count extends AbstractValidator
             }
         }

+        if ($file instanceof UploadedFileInterface && is_string($file->getClientFilename())) {
+            $this->files[(string) $file->getClientFilename()] = $file->getClientFilename();
+        }
+
         return $this;
     }

@@ -202,17 +207,23 @@ class Count extends AbstractValidator
      * not bigger than max (when max is not null). Attention: When checking with set min you
      * must give all files with the first call, otherwise you will get a false.
      *
-     * @param  string|array $value Filenames to check for count
-     * @param  array        $file  File data from \Laminas\File\Transfer\Transfer
+     * @param  string|array|UploadedFileInterface $value Filenames to check for count
+     * @param  array                              $file  File data from \Laminas\File\Transfer\Transfer
      * @return bool
      */
     public function isValid($value, $file = null)
     {
-        if (($file !== null) && ! array_key_exists('destination', $file)) {
-            $file['destination'] = dirname($value);
+        $isUploadedFileInterface = $value instanceof UploadedFileInterface;
+
+        if ($isUploadedFileInterface) {
+            $this->addFile($value);
         }

-        if (($file !== null) && array_key_exists('tmp_name', $file)) {
+        if (! $isUploadedFileInterface && ($file !== null) && ! array_key_exists('destination', $file)) {
+             $file['destination'] = dirname($value);
+         }
+
+        if (! $isUploadedFileInterface && ($file !== null) && array_key_exists('tmp_name', $file)) {
             $value = $file['destination'] . DIRECTORY_SEPARATOR . $file['name'];
         }

diff --git a/test/File/CountTest.php b/test/File/CountTest.php
index 35cc469e..7152ed78 100644
--- a/test/File/CountTest.php
+++ b/test/File/CountTest.php
@@ -5,8 +5,11 @@ namespace LaminasTest\Validator\File;
 use Laminas\Validator\Exception\InvalidArgumentException;
 use Laminas\Validator\File;
 use PHPUnit\Framework\TestCase;
+use Psr\Http\Message\UploadedFileInterface;
 use ReflectionClass;

+use function basename;
+
 /**
  * @group      Laminas_Validator
  */
@@ -233,4 +236,17 @@ class CountTest extends TestCase
         $this->assertSame($min, $validator->getMin());
         $this->assertSame($max, $validator->getMax());
     }
+
+    public function testPsr7FileTypes(): void
+    {
+        $testFile = __DIR__ . '/_files/testsize.mo';
+
+        $upload = $this->createMock(UploadedFileInterface::class);
+        $upload->method('getClientFilename')->willReturn(basename($testFile));
+
+        $validator = new File\Count(['min' => 1]);
+
+        $this->assertSame(true, $validator->isValid($upload));
+        $this->assertSame(true, $validator->isValid($upload, []));
+    }
 }
